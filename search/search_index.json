{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"rpi/","text":"Raspberry Pi Post installation tweaks Update packages sudo apt update && sudo apt upgrade -y Change hostname hostnamectl set-hostname <NEW_HOSTNAME> And add an entry to /etc/hosts 127.0.0.1 new-hostname Setup firewall Set default rules and allow SSH connexion through the firewall sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow ssh sudo ufw enable AdGuard Home AdGuard wiki Installation Download and extract Linux ARM: 32-bit ARMv6 (recommended for Raspberry Pi) wget https://static.adguard.com/adguardhome/release/AdGuardHome_linux_armv6.tar.gz tar -xf AdGuardHome_linux_armv6.tar.gz Enable firewall temporary rules to access AdGuard initial configuration wizard on port 3000 sudo ufw allow 3000 Run AdGuard and configure until the last step shutdown the app using CTRL+C twice. sudo ./AdGuardHome Display ufw temporary firewall rules and remove rule by rule number sudo ufw status numbered sudo ufw delete {rule-number-here} Install AdGuard service sudo ./AdGuardHome -s install Add rule to allow HTTP connections sudo ufw allow http Add rules to allow DNS connections sudo ufw allow 53/tcp sudo ufw allow 53/udp Configure Nginx as a reverse proxy server for AdGuard Home Edit AdGuard configuration to bind the service to another port than HTTP/80. Change configuration to another port: bind_host: 127.0.0.1 and bind_port: 81 and restart the service. sudo nano AdGuardHome.yaml sudo ./AdGuardHome -s restart Install Nginx sudo apt install nginx -y Sample nginx reverse proxy configuration location /agh/ { proxy_pass http://localhost:81/; proxy_redirect / /agh/; proxy_cookie_path / /agh/; } Add the reverse proxy to Nginx configuration and restart the service sudo nano /etc/nginx/sites-available/default sudo systemctl restart nginx Access AdGuard Home dashboard SERVER_IP/adg Custom DNS blocklists SebSauvage Hostfile https://sebsauvage.net/hosts/hosts-adguard AdGuard Social Media filter https://filters.adtidy.org/extension/chromium/filters/4.txt AdGuard Tracking Protection filter https://filters.adtidy.org/extension/chromium/filters/3.txt AdGuard Base filter https://filters.adtidy.org/extension/chromium/filters/2.txt AdGuard Annoyances filter https://filters.adtidy.org/extension/chromium/filters/14.txt Filter unblocking search ads and self-promotion https://filters.adtidy.org/extension/chromium/filters/10.txt AdGuard Russian filter https://filters.adtidy.org/extension/chromium/filters/1.txt AdGuard German filter https://filters.adtidy.org/extension/chromium/filters/6.txt AdGuard French filter https://filters.adtidy.org/extension/chromium/filters/16.txt AdGuard Japanese filter https://filters.adtidy.org/extension/chromium/filters/7.txt AdGuard Mobile Ads filter https://filters.adtidy.org/extension/chromium/filters/11.txt AdGuard DNS filter https://filters.adtidy.org/extension/chromium/filters/15.txt WaLLy3K's Blacklist https://v.firebog.net/hosts/static/w3kbl.txt ZeroDot1 CoinBlockerLists https://zerodot1.gitlab.io/CoinBlockerLists/hosts_browser Fademind's Risky Hosts https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts Spam404 https://raw.githubusercontent.com/Spam404/lists/master/main-blacklist.txt DigitalSide Threat-Intel https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt Easy privacy https://v.firebog.net/hosts/Easyprivacy.txt Quidsup Tracker https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-blocklist.txt Blocklist Scam https://blocklist.site/app/dl/scam Blocklist Fraud https://blocklist.site/app/dl/fraud Blocklist Phishing https://blocklist.site/app/dl/phishing Blocklist Ads https://blocklist.site/app/dl/ads","title":"Raspberry Pi"},{"location":"rpi/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"rpi/#post-installation-tweaks","text":"","title":"Post installation tweaks"},{"location":"rpi/#update-packages","text":"sudo apt update && sudo apt upgrade -y","title":"Update packages"},{"location":"rpi/#change-hostname","text":"hostnamectl set-hostname <NEW_HOSTNAME> And add an entry to /etc/hosts 127.0.0.1 new-hostname","title":"Change hostname"},{"location":"rpi/#setup-firewall","text":"Set default rules and allow SSH connexion through the firewall sudo ufw default deny incoming sudo ufw default allow outgoing sudo ufw allow ssh sudo ufw enable","title":"Setup firewall"},{"location":"rpi/#adguard-home","text":"AdGuard wiki","title":"AdGuard Home"},{"location":"rpi/#installation","text":"Download and extract Linux ARM: 32-bit ARMv6 (recommended for Raspberry Pi) wget https://static.adguard.com/adguardhome/release/AdGuardHome_linux_armv6.tar.gz tar -xf AdGuardHome_linux_armv6.tar.gz Enable firewall temporary rules to access AdGuard initial configuration wizard on port 3000 sudo ufw allow 3000 Run AdGuard and configure until the last step shutdown the app using CTRL+C twice. sudo ./AdGuardHome Display ufw temporary firewall rules and remove rule by rule number sudo ufw status numbered sudo ufw delete {rule-number-here} Install AdGuard service sudo ./AdGuardHome -s install Add rule to allow HTTP connections sudo ufw allow http Add rules to allow DNS connections sudo ufw allow 53/tcp sudo ufw allow 53/udp","title":"Installation"},{"location":"rpi/#configure-nginx-as-a-reverse-proxy-server-for-adguard-home","text":"Edit AdGuard configuration to bind the service to another port than HTTP/80. Change configuration to another port: bind_host: 127.0.0.1 and bind_port: 81 and restart the service. sudo nano AdGuardHome.yaml sudo ./AdGuardHome -s restart Install Nginx sudo apt install nginx -y Sample nginx reverse proxy configuration location /agh/ { proxy_pass http://localhost:81/; proxy_redirect / /agh/; proxy_cookie_path / /agh/; } Add the reverse proxy to Nginx configuration and restart the service sudo nano /etc/nginx/sites-available/default sudo systemctl restart nginx Access AdGuard Home dashboard SERVER_IP/adg","title":"Configure Nginx as a reverse proxy server for AdGuard Home"},{"location":"rpi/#custom-dns-blocklists","text":"SebSauvage Hostfile https://sebsauvage.net/hosts/hosts-adguard AdGuard Social Media filter https://filters.adtidy.org/extension/chromium/filters/4.txt AdGuard Tracking Protection filter https://filters.adtidy.org/extension/chromium/filters/3.txt AdGuard Base filter https://filters.adtidy.org/extension/chromium/filters/2.txt AdGuard Annoyances filter https://filters.adtidy.org/extension/chromium/filters/14.txt Filter unblocking search ads and self-promotion https://filters.adtidy.org/extension/chromium/filters/10.txt AdGuard Russian filter https://filters.adtidy.org/extension/chromium/filters/1.txt AdGuard German filter https://filters.adtidy.org/extension/chromium/filters/6.txt AdGuard French filter https://filters.adtidy.org/extension/chromium/filters/16.txt AdGuard Japanese filter https://filters.adtidy.org/extension/chromium/filters/7.txt AdGuard Mobile Ads filter https://filters.adtidy.org/extension/chromium/filters/11.txt AdGuard DNS filter https://filters.adtidy.org/extension/chromium/filters/15.txt WaLLy3K's Blacklist https://v.firebog.net/hosts/static/w3kbl.txt ZeroDot1 CoinBlockerLists https://zerodot1.gitlab.io/CoinBlockerLists/hosts_browser Fademind's Risky Hosts https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Risk/hosts Spam404 https://raw.githubusercontent.com/Spam404/lists/master/main-blacklist.txt DigitalSide Threat-Intel https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt Easy privacy https://v.firebog.net/hosts/Easyprivacy.txt Quidsup Tracker https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-blocklist.txt Blocklist Scam https://blocklist.site/app/dl/scam Blocklist Fraud https://blocklist.site/app/dl/fraud Blocklist Phishing https://blocklist.site/app/dl/phishing Blocklist Ads https://blocklist.site/app/dl/ads","title":"Custom DNS blocklists"},{"location":"programming/clean_code/","text":"Code Complete 2 Clean Code The Pragmatic Programmer Why Writing Clean Code Matters: Resources 0:27 delete edit Select the right tool for the job High signal to noise ratio, clean code optimizes for signal and strives to remove any noise that the reader can easily read the logic and understand the intent. Self-documenting, write code in such a clear and expressive style that no documentation is needed at all. Clean Coding Principles: Three Clean Code Principles 0:22 delete edit Signal = code that follows the \"TED rule\". Terse: code shouldn't be excessively wordy Expressive: clear what the code is trying to do Does one thing: the code should have a clear responsability Clean Coding Principles: Maximizing Signal to Noise 0:34 delete edit Noise = code that reduce readability and hinder maintenance High cyclomatic complexity Huge classes Excessive indentation Long methods Zombie code Repetition Unnecessary comments No whitespace Overly verbose Poorly named structures Clean Coding Principles: Maximizing Signal to Noise 1:10 delete edit The \"rule of 7\" effects: Number of parameters per method Number of methods in a class Number of variables currently in scope Clean Coding Principles: Maximizing Signal to Noise 1:50 delete edit DRY principle -> Don't Repeat Yourself Database are normalized in an effort to assure each piece of data is defined in a single place. This assures that the database operates efficiently, consistently and eases maintenance. Clean Coding Principles: Don't Repeat Yourself 0:21 delete edit Duplication Issues Copy paste is often a design problem Decreases signal to noise ratio Increases the number of lines of code Creates a maintenance problem Clean Coding Principles: Don't Repeat Yourself 1:00 delete edit Self-documenting code Clear intent: clearly express the intent so that readers understand exactly what the programmer is trying to accomplish Layers of abstraction: should be used so that the problem domain can be considered and walked through at different levels of detail Format for readability: formatting in a friendly and consistent manner will optimize the reading experience Favor code over comments, favoring code over comments when possible will assure that the code is as expressive as it can be without relying on comments to explain away unnecessary ambiguity Clean Coding Principles: Self-documenting Code 0:47 delete edit Self-documenting code idealy eliminate the need for out-of-band documentation (such as JavaDoc, wikis, ...) Clean Coding Principles: Self-documenting Code 1:32 delete edit Naming classes Specific names encourage small, cohesive classes A well-design class should have a single responsibility, and its name should help reflect that class names are noun not verbs avoid Generic suffixes ( manager, processor, Common, Utility) quality of the name: ask the following question : is an instance of this logical ? Naming: Naming Classes 1:18 delete edit Naming Methods with a good method name, the reader doesn't need to read the method to know what it does Naming: Naming Methods 1:17 delete edit Rubber ducking Verbalizing aids creativity, explain what a class does out loud Explain it to the rubber duck Naming: Rubber Ducking 0:50 delete edit well-named boolean should sound like a true/false question not a command like start, open, status isOpen, done, isActive, loggedIn Naming: Naming Booleans 0:14 delete edit Use symmetrical names like on/off, fast/slow unlike quick/slow, on/disable Naming: Strive for Symmetry 0:35 delete edit Compare boolean implicitly, don't do if (loggedIn == true) Writing Conditionals That Convey Intent: Boolean Comparisons 0:28 delete edit Assign boolean implicitly, do: bool goingToChipotleForLunch = cashInWallet > 6.00 Writing Conditionals That Convey Intent: Boolean Assignments 1:02 delete edit Be positive (don't be anti-negative), don't do: if (!isNotLoggedIn) Writing Conditionals That Convey Intent: Prefer Positive Conditionals 0:08 delete edit Don't use chaining or nesting ternaries Writing Conditionals That Convey Intent: Ternaries Are Beautiful 2:08 delete edit Be strongly typed, not \"stringly typed\", don't if (employeeType == \"manager\") use enums and do if (employee.type == EmployeeType.Manager) Writing Conditionals That Convey Intent: Be Strongly Typed 0:14 delete edit Magic numbers are to be avoided because they require careful review of the context and they expect the reader to fill gaps Writing Conditionals That Convey Intent: Avoid Magic Numbers 0:59 delete edit Complex conditionals, Use intermediate variables Encapsulate via function Writing Conditionals That Convey Intent: Handling Complex Conditionals 0:33 delete edit Favor polymorphism over Switch statement. Each class knows how to handle its unique behaviors. Writing Conditionals That Convey Intent: Prefer Polymorphism over Enums 1:31 delete edit Function vs Method Both methods and functions are pieces of code, called by name. Methods are associated with an object Writing Clean Methods: When to Create a Function 0:18 delete edit When to create of function duplication indentation unclear intent help maintain single responsability Writing Clean Methods: When to Create a Function 1:04 delete edit Arrow code refers to excessive indentation levels. Arrow code is a sign that the code has a high cyclomatic complexity (a measure of the number of paths through code) Writing Clean Methods: Why Create a Method - Reason 2: Excessive Indentation 0:14 delete edit Fail fast Add guard clauses to throw an exception as soon as an unexpected situation that can't be handled occurs Guard clauses ensures a method inputs are valid before continuing processing. add default to switch statements and throw exceptions to fail fast Writing Clean Methods: Excessive Indentation - Solution 2: Fail Fast 1:00 delete edit \"Use a return when it enhances readability... In certain routines, once you know the answer... not returning immediately means that you have to write more code.\" Steve McConnell, Code Complete Writing Clean Methods: Excessive Indentation - Solution 3: Return Early 1:39 delete edit A high number of parameters makes a function harder to understand. It's a sign the function is doing too much. Strive for 0-2 parameters, this will make the code easier to read, understand and test. Writing Clean Methods: How Many Parameters? 0:07 delete edit Sign a function is too long: Whitespace and comments Scrolling required Easy to name with a single define task Multiple conditionals Many layers of abstraction Writing Clean Methods: Signs a Method Is too Long 0:32 delete edit Exception types Unrecoverable Null reference File not found Access denied Recoverable Retry connection Try a different file Wait and try again Ignorable Logging The correct behavior for a broken application is to crash immediately. Fail fast. Fail loud Writing Clean Methods: Handling Exceptions 0:26 delete edit When to create a class New concept : abstract or real world Low cohesion : methods should relate Promote reuse : small and targeted Reduce complexity : solve once, hide away the complexity Clarify parameters : Identify a group of data Writing Clean Classes: When to Create a Class 1:12 delete edit Proximity Principle Make code read top to bottom when possible Keep related actions together Writing Clean Classes: The Proximity Principle 0:53 delete edit The boy scout rule: Leave the code you're editing a little better than you found it Robert C. Martin","title":"Clean Code"}]}